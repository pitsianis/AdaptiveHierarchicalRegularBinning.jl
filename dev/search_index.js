var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = AdaptiveHierarchicalRegularBinning","category":"page"},{"location":"#AdaptiveHierarchicalRegularBinning","page":"Home","title":"AdaptiveHierarchicalRegularBinning","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AdaptiveHierarchicalRegularBinning.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [AdaptiveHierarchicalRegularBinning]","category":"page"},{"location":"#AdaptiveHierarchicalRegularBinning.countsortperm!-Tuple{Any, Any, Any}","page":"Home","title":"AdaptiveHierarchicalRegularBinning.countsortperm!","text":"countsortperm!(p, v, C)\n\n\nSequential count sort permutation. Overwrite vector p with the permutation that puts vector of values v[p] in non decreasing order.\n\np: preallocated output vector of integers to receive the permutation\nv: input vector of integer values that determine order. The unique values      of v must be in the range 0:m where m << length(v)\nC: preallocated workspace of size at least m+1\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveHierarchicalRegularBinning.morton-Tuple{Any, Any}","page":"Home","title":"AdaptiveHierarchicalRegularBinning.morton","text":"morton(p, L) -> Any\n\n\nSpatially encode a single point 0 ≤ p < 1 for L levels\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveHierarchicalRegularBinning.pcountsortperm!-Tuple{Vector{Int64}, Vector{Int64}, Matrix{Int64}}","page":"Home","title":"AdaptiveHierarchicalRegularBinning.pcountsortperm!","text":"pcountsortperm!(p::Vector{Int64}, v::Vector{Int64}, C::Matrix{Int64})\n\n\nMultithreaded count sort permutation. Overwrite vector p with the permutation that puts vector of values v[p] in non decreasing order.\n\np: preallocated output vector of integers to receive the permutation\nv: input vector of integer values that determine order. The unique values      of v must be in the range 0:m where m << length(v)\nC: preallocated workspace of size at least (m+1+8:np+1),      where np is the number of threads.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveHierarchicalRegularBinning.translate_scale_vals-Tuple{Any}","page":"Home","title":"AdaptiveHierarchicalRegularBinning.translate_scale_vals","text":"translate_scale_vals(p; center, dims) -> Tuple{Any, Any}\n\n\nFind the displacement vector δ and scale scalar σ parameters that will transform the cloud points p to be within a unit box [0,1),\n\n0 ≤ σ (p - δ) < 1\n\np: cloud point coordinates\ncenter: flag to center the cloud by dividing the slack evenly, default false\ndims  : dimension of p expressing single point coordinates,\n\ni.e. if the i^th point is p[i,:], then set dims=2.\n\n\n\n\n\n","category":"method"}]
}
