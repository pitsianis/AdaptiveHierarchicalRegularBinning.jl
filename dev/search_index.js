var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = AdaptiveHierarchicalRegularBinning","category":"page"},{"location":"#AdaptiveHierarchicalRegularBinning","page":"Home","title":"AdaptiveHierarchicalRegularBinning","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AdaptiveHierarchicalRegularBinning.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [AdaptiveHierarchicalRegularBinning]","category":"page"},{"location":"#AdaptiveHierarchicalRegularBinning.NodeInfo","page":"Home","title":"AdaptiveHierarchicalRegularBinning.NodeInfo","text":"struct NodeInfo\n\nRepresents a node of the tree.\n\nFields\n\nlo: The start index of the represented group.\nhi: The stop index of the represented group.\ndpt: The depth of the node\nnidx: The index of the node.\npidx: The index of the parent node.\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveHierarchicalRegularBinning.SpatialTree","page":"Home","title":"AdaptiveHierarchicalRegularBinning.SpatialTree","text":"struct SpatialTree{T, E, C, GTC}\n\nRepresents the tree.\n\nFields\n\nT: The element type of the points.\nE: The element type of the encoded points.\nB: The bit length of each bit group in the encoded space.\nD: The leading dimension.\ninfo: The tree information.\nnidx: Index to the current root of the tree.\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveHierarchicalRegularBinning.TreeInfo","page":"Home","title":"AdaptiveHierarchicalRegularBinning.TreeInfo","text":"struct TreeInfo{T, E, C, GTC}\n\nRepresents the tree information.\n\nFields\n\nT: The element type of the points.\nE: The element type of the encoded points.\nB: The bit length of each bit group in the encoded space.\nD: The leading dimension.\npoints: The cloud of points that the tree spans.\nencoded: The encoded cloud of points.\nperm: The permutation of the points.\nscale: The original scale of the dimensions of the points.\noffset: The per dimension offset of the points.\nnodes: Per node information.\nchildren: Per node children.\nmaxdepth: The maximum depth of the tree.\nmaxpoints: Small threshold.\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveHierarchicalRegularBinning.ahrb","page":"Home","title":"AdaptiveHierarchicalRegularBinning.ahrb","text":"ahrb(V) -> SpatialTree\nahrb(V, maxdepth) -> SpatialTree\nahrb(\n    V,\n    maxdepth,\n    maxpoints;\n    QT,\n    ctxtype,\n    gtctype,\n    method,\n    lstep\n) -> SpatialTree\n\n\nGenerate an adaptive hierarchical regular binning tree structure.\n\nArguments\n\nV: A matrix of data points, where each column represents a data point and each row represents a feature.\nmaxdepth: An integer that specifies the maximum depth of the tree. Default is ceil(Int, log2(size(V,2))).\nmaxpoints: An integer that specifies the maximum number of points in a leaf node. Default is ceil(Int, (size(V,2))^(1/4)).\nQT: (Optional) The type of the vector R used to store the spatial encoding of the data points. Defaults to UInt.\nctxtype: (Optional) The type of the context information stored at each node of the tree. Defaults to Nothing.\ngtctype: (Optional) The type of the global context information stored alongside the tree. Defaults to Nothing.\nlstep: (Optional) The number of levels to process in each block iteration. Defaults to 2.\nmethod: (Optional) The method to use for the spatial encoding. Defaults to \"block-ecp\". Possible values are:\n\"block-ecp\": Use the block ECP version.\n\"fixed-length\": Use the fixed length encoding.\n\nReturns\n\nThe generated tree structure.\n\nExample\n\njulia> V = rand(6, 10_000);\n\njulia> tree = ahrb(V, 5, 10)\nSpatialTree: \nMatrix{Float64}(6,10000) points\n3805 nodes, 3740 leaves and max depth 2\n\n\n\n\n\n","category":"function"},{"location":"#AdaptiveHierarchicalRegularBinning.box2boxdist-NTuple{4, Any}","page":"Home","title":"AdaptiveHierarchicalRegularBinning.box2boxdist","text":"box2boxdist(c1, h1, c2, h2)\n\nbox2boxdist(node1, node2)\n\nCompute the distance between two boxes. c denotes the center of the box, h denotes the half-width of the box.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveHierarchicalRegularBinning.compute_centers_sidelengths!-Union{Tuple{Tu}, Tuple{V}, Tuple{Array{Vector{V}, 1}, Vector{V}, Vector{NodeInfo}, Vector{Tu}, Int64, Int64}} where {V<:Real, Tu<:Unsigned}","page":"Home","title":"AdaptiveHierarchicalRegularBinning.compute_centers_sidelengths!","text":"compute_centers_sidelengths!(\n    centers::Array{Array{V<:Real, 1}, 1},\n    sidelengths::Array{V<:Real, 1},\n    nodes::Vector{NodeInfo},\n    R0::Array{Tu<:Unsigned, 1},\n    currentdepth::Int64,\n    d::Int64\n)\n\n\nCompute the center and sidelength of each node in the tree.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveHierarchicalRegularBinning.copy_final!-Union{Tuple{Tr}, Tuple{Tr, Tr, Vector{Int8}}} where Tr<:(AbstractVector)","page":"Home","title":"AdaptiveHierarchicalRegularBinning.copy_final!","text":"copy_final!(\n    R0::AbstractVector,\n    R1::AbstractVector,\n    data_0or1::Vector{Int8}\n)\n\n\nCopy the codes and the permutation vector between the ping-pong buffers for the final result\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveHierarchicalRegularBinning.find_rec_leaves-Tuple{Vector{NodeInfo}, Vector{Vector{Int64}}, Int64}","page":"Home","title":"AdaptiveHierarchicalRegularBinning.find_rec_leaves","text":"find_rec_leaves(\n    nodes::Vector{NodeInfo},\n    children::Vector{Vector{Int64}},\n    maxpts::Int64\n) -> Vector{Int64}\n\n\nFind leaves that are above the maximum number of points per leaf and we should recurse to subdivide them.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveHierarchicalRegularBinning.getcontext-Tuple{SpatialTree}","page":"Home","title":"AdaptiveHierarchicalRegularBinning.getcontext","text":"Read context of a node\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveHierarchicalRegularBinning.point2boxdist-Tuple{Any, Any, Any}","page":"Home","title":"AdaptiveHierarchicalRegularBinning.point2boxdist","text":"point2boxdist(p, c, h)\n\npoint2boxdist(p, node)\n\nCompute the distance between a point and a box. p denotes the point. c denotes the center of the box, h denotes the half-width of the box.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveHierarchicalRegularBinning.select_pingpong_buffers_subdivision-NTuple{8, Any}","page":"Home","title":"AdaptiveHierarchicalRegularBinning.select_pingpong_buffers_subdivision","text":"select_pingpong_buffers_subdivision(\n    R0,\n    V0,\n    Pglb,\n    R1,\n    V1,\n    Plcl,\n    rng,\n    data_0or1\n) -> NTuple{6, Any}\n\n\nSelect which buffer to use for the ping-pong algorithm.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveHierarchicalRegularBinning.setcontext!-Union{Tuple{GTC}, Tuple{C}, Tuple{E}, Tuple{T}, Tuple{SpatialTree{T, E, C, GTC}, C}} where {T, E, C, GTC}","page":"Home","title":"AdaptiveHierarchicalRegularBinning.setcontext!","text":"Set context of a node\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveHierarchicalRegularBinning.specialprioritymultilevelinteractions-Union{Tuple{GTC}, Tuple{C}, Tuple{E}, Tuple{T}, Tuple{SpatialTree{T, E, C, GTC}, SpatialTree{T, E, C, GTC}, Vararg{Function, 4}}} where {T<:Real, E<:Unsigned, C, GTC}","page":"Home","title":"AdaptiveHierarchicalRegularBinning.specialprioritymultilevelinteractions","text":"Specialized version of prioritymultilevelinteractions  where t is constant leaf.\n\n\n\n\n\n","category":"method"}]
}
